{"version":3,"sources":["webpack:///./node_modules/lodash/_baseIsNaN.js","webpack:///./node_modules/lodash/_strictIndexOf.js","webpack:///./node_modules/lodash/_baseFindIndex.js","webpack:///./src/components/BlogItem/BlogItem.tsx","webpack:///./src/ui/SiteDescription/SiteDescription.tsx","webpack:///./src/pages/index.tsx","webpack:///./node_modules/lodash/_baseIndexOf.js","webpack:///./node_modules/lodash/toInteger.js","webpack:///./node_modules/lodash/toFinite.js","webpack:///./node_modules/lodash/toNumber.js","webpack:///./node_modules/lodash/indexOf.js"],"names":["module","exports","value","array","fromIndex","index","length","predicate","fromRight","BlogItem","props","Header","type","Link","to","path","title","className","date","excerpt","SiteDescription","IndexPage","featuredBlogs","data","allMarkdownRemark","edges","map","e","node","filter","blog","getTags","frontmatter","tags","Layout","key","id","baseFindIndex","baseIsNaN","strictIndexOf","toFinite","result","remainder","toNumber","isObject","isSymbol","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","other","valueOf","replace","isBinary","test","slice","baseIndexOf","toInteger","nativeMax","Math","max"],"mappings":"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","file":"component---src-pages-index-tsx-82267f75043614cb5e53.js","sourcesContent":["/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n","import React from 'react';\nimport Header from '../Header';\nimport Link from '../Link';\n\ninterface Props {\n\ttitle: string;\n\texcerpt?: string;\n\tdate?: string;\n\tpath: string;\n}\n\nconst BlogItem = (props: React.PropsWithChildren<Props>): JSX.Element => {\n\treturn (\n\t\t<section>\n\t\t\t<Header type=\"h2\">\n\t\t\t\t<Link to={props.path}>{props.title}</Link>\n\t\t\t</Header>\n\t\t\t<div className=\"text-gray-500\">{props.date}</div>\n\t\t\t<div>{props.excerpt}</div>\n\t\t</section>\n\t);\n};\n\nexport default BlogItem;\n","import React from 'react';\n\nconst SiteDescription = (): JSX.Element => {\n\treturn (\n\t\t<div className=\"my-5\">Fullstack Software Developer, San Fransisco</div>\n\t);\n};\n\nexport default SiteDescription;\n","import * as React from 'react';\nimport BlogItem from '../components/BlogItem';\nimport SiteDescription from '../ui/SiteDescription';\nimport Layout from '../ui/Layout';\nimport {graphql} from 'gatsby';\nimport _ from 'lodash';\nimport {getTags} from '../utils';\n\ninterface Props {\n\tdata: any;\n}\n\nconst IndexPage = (props: React.PropsWithChildren<Props>): JSX.Element => {\n\tconst blogs = props.data.allMarkdownRemark.edges.map((e) => e.node);\n\tconst featuredBlogs = blogs.filter(\n\t\t(blog) => _.indexOf(getTags(blog.frontmatter.tags), 'featured') >= 0\n\t);\n\n\treturn (\n\t\t<Layout>\n\t\t\t<SiteDescription />\n\t\t\t<section className=\"\">\n\t\t\t\t{featuredBlogs.map((blog) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<BlogItem\n\t\t\t\t\t\t\tkey={blog.id}\n\t\t\t\t\t\t\ttitle={blog.frontmatter.title}\n\t\t\t\t\t\t\tdate={blog.frontmatter.date}\n\t\t\t\t\t\t\tpath={blog.frontmatter.path}\n\t\t\t\t\t\t\texcerpt={blog.excerpt}\n\t\t\t\t\t\t></BlogItem>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</section>\n\t\t</Layout>\n\t);\n};\n\nexport const pageQuery = graphql`\n\tquery IndexQuery {\n\t\tallMarkdownRemark(\n\t\t\tsort: {order: DESC, fields: [frontmatter___date]}\n\t\t\tfilter: {frontmatter: {path: {regex: \"/^/blogs.*/\"}}}\n\t\t) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\texcerpt(pruneLength: 250)\n\t\t\t\t\tid\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tdate(formatString: \"MMMM DD, YYYY\")\n\t\t\t\t\t\tpath\n\t\t\t\t\t\ttags\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport default IndexPage;\n","var baseFindIndex = require('./_baseFindIndex'),\n    baseIsNaN = require('./_baseIsNaN'),\n    strictIndexOf = require('./_strictIndexOf');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var toNumber = require('./toNumber');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var baseIndexOf = require('./_baseIndexOf'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nmodule.exports = indexOf;\n"],"sourceRoot":""}